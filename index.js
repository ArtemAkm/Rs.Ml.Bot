const { Telegraf, session, Markup, Extra } = require('telegraf');
const fs = require('fs');
const https = require('https');

const sqlite3 = require('sqlite3');
const config = require('./config');
const path = require('path');
const AdmZip = require('adm-zip');

const bot = new Telegraf(config.botToken);

const db = new sqlite3.Database('user.db');

const fetch = require('node-fetch');
const { promisify } = require('util');

const exchangesFolder = 'exchanges';
const solarSystemFolder = 'solar_system';
const worldFolder = 'world';
const checkWorldFolder = 'check_world';

const participantsFile = 'participants.json';
const bannedUsersFile = 'banusers.json';
const ownerId = config.adminID; 

const waitingForApproval = {}; 
const bannedUsers = {};

const rocketsFilePath = './check_world/Multiplayer/Persistent/Rockets.txt'; 

const maxUsers = config.maxusers;

const participants = loadParticipants();

let approvedUsersCount = participants.length;
let isRegistrationOpen = false;

let stazis = false;

if (approvedUsersCount < maxUsers) {
  isRegistrationOpen = true;
}

db.serialize(() => {
  db.run('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, status TEXT)');
});

bot.use(session());


function isUserBanned(userId) {
  const bannedUsersList = loadBannedUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  return bannedUsersList.some(user => user.id === userId);
}

// –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
bot.use((ctx,next) => {
  const userId = String(ctx.from.id);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ownerId)
  const isAdmin = String(userId) === String(ownerId);


  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö, –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
  if (!isAdmin && isUserBanned(userId)) {
    return;
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
  next();
});

function getRocketNames(fileBuffer) {
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É
    const data = fileBuffer.toString('utf-8');

    // –ò—â–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è "rocketName" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    const rocketNamesMatch = data.match(/"rocketName":\s*"(.*?)"/g);

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ä–∞–∫–µ—Ç –∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const rocketNames = rocketNamesMatch
      ? rocketNamesMatch.map((match) => match.match(/"rocketName":\s*"(.*?)"/)[1])
      : [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const nonEmptyRocketNames = rocketNames.filter((name) => name.trim() !== '');
    const uniqueRocketNames = [...new Set(nonEmptyRocketNames)];

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–º–µ–Ω, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if (uniqueRocketNames.length < nonEmptyRocketNames.length) {
      const duplicates = nonEmptyRocketNames.filter((name, index, array) => array.indexOf(name) !== index);
      return { result: 'repeat', duplicates };
    }

    return { result: 'success', rocketNames: uniqueRocketNames };
  } catch (error) {
    // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'exists'
    if (error.code === 'ENOENT') {
      return { result: 'exists' };
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    console.error('Error reading Rockets file:', error.message);
    return { result: 'error', error: error.message };
  }
}


bot.start((ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  const firstname = ctx.from.first_name;

  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db.run('INSERT OR IGNORE INTO users (id, username, status) VALUES (?, ?, ?)', [userId, username, 'none'], (err) => {
    if (err) {
      console.error(err.message);
    }
  });


  const keyboard = Markup.keyboard([
    ['üöÄ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üöÄ'],
    ['ü§ñ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ü§ñ', '‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è'],
    ['üìî –ü—Ä–∞–≤–∏–ª–∞ üìî']
  ]).resize();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ctx.reply(`
–ü—Ä–∏–≤–µ—Ç, ${firstname}! –Ø –±–æ—Ç R. S. Multiplayer!

–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã —Å–º–æ–∂–µ—à—å —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ!
–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞, —É–¥–∞—á–∏!
  `, { ...keyboard, parse_mode: 'Markdown' }); 
});

const getUserNameById = (userId, callback) => {
  db.get('SELECT username FROM users WHERE id = ?', [userId], (err, row) => {
    if (err) {
      console.error(err.message);
      callback(err, null);
    } else {
      const username = row ? row.username : null;
      callback(null, username);
    }
  });
};

const getUserStatusById = (userId) => {
  return new Promise((resolve, reject) => {
    db.get('SELECT status FROM users WHERE id = ?', [userId], (err, row) => {
      if (err) {
        console.error(err.message);
        reject(err);
      } else {
        const status = row ? row.status : null;
        resolve(status);
      }
    });
  });
};

// Function to set user status by id
const setUserStatusById = (userId, status) => {
  return new Promise((resolve, reject) => {
    db.run('UPDATE users SET status = ? WHERE id = ?', [status, userId], (err) => {
      if (err) {
        console.error(err.message);
        reject(err);
      } else {
        resolve();
      }
    });
  });
};


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /system
bot.command('system', async (ctx) => {
  const userId = ctx.from.id;

  try {
    const userStatus = await getUserStatusById(userId);

    if (userId === ownerId) { // –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      if (userStatus === 'system') {
        ctx.reply('–§–∞–π–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /system —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.');
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'system' –≤ –ë–î
      await setUserStatusById(userId, 'system');

      ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip —Ñ–∞–π–ª –∏–≥—Ä–æ–≤–æ–π —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.');
    } else {
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }
  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /world
bot.command('world', async (ctx) => {
  const userId = ctx.from.id;

  try {
    const userStatus = await getUserStatusById(userId);

    if (userId === ownerId) { // –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      if (userStatus === 'world') {
        ctx.reply('–§–∞–π–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /world —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.');
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'world' –≤ –ë–î
      await setUserStatusById(userId, 'world');

      ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ .zip —Ñ–∞–π–ª –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞.');
    } else {
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }
  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
bot.on('document', async (ctx) => {
  const userId = ctx.from.id;

  const waitingForFileStatus = await getUserStatusById(userId);

  const fileId = ctx.message.document.file_id;
  const file = await ctx.telegram.getFile(fileId);
  const downloadLink = `https://api.telegram.org/file/bot${config.botToken}/${file.file_path}`;
  
  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
  if (waitingForFileStatus === 'system') {
    handleSystemFile(ctx, downloadLink);
  } else if (waitingForFileStatus === 'world') {
    handleWorldFile(ctx, downloadLink);
  }
});

async function downloadFile(url, destination) {
  const response = await fetch(url);
  const buffer = await response.buffer();
  await promisify(fs.writeFile)(destination, buffer);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /system
function handleSystemFile(ctx, downloadLink) {
  const userId = ctx.from.id;
  const exchangesFolderPath = path.join(__dirname, exchangesFolder);
  const solarSystemFolderPath = path.join(exchangesFolderPath, solarSystemFolder);

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É exchanges, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(exchangesFolderPath)) {
    fs.mkdirSync(exchangesFolderPath);
  }

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É solar_system, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(solarSystemFolderPath)) {
    fs.mkdirSync(solarSystemFolderPath);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const fileName = `solar_system.zip`;
  const filePath = path.join(solarSystemFolderPath, fileName);

  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  downloadFile(downloadLink, filePath)
    .then(() => {
      ctx.reply('–§–∞–π–ª –∏–≥—Ä–æ–≤–æ–π —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
      setUserStatusById(userId, null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.');
      setUserStatusById(userId, null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /world
async function handleWorldFile(ctx, downloadLink) {
  const userId = ctx.from.id;
  const checkWorldFolderPath = path.join(__dirname, exchangesFolder, checkWorldFolder);
  const worldExchangesFolderPath = path.join(__dirname, exchangesFolder, worldFolder);

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É exchanges/check_world, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(checkWorldFolderPath)) {
    fs.mkdirSync(checkWorldFolderPath, { recursive: true });
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ check_world
  const fileName = `world.zip`;
  const filePath = path.join(checkWorldFolderPath, fileName);

  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await downloadFile(downloadLink, filePath);

    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    const zip = new AdmZip(filePath);
    zip.extractAllTo(checkWorldFolderPath, /*overwrite*/ true);

    const rocketsFilePath = path.join(checkWorldFolderPath, 'Multiplayer', 'Persistent', 'Rockets.txt');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Rockets.txt
    if (!fs.existsSync(rocketsFilePath)) {
      ctx.reply('–û—à–∏–±–∫–∞: –§–∞–π–ª Rockets.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ Rockets.txt
    const rocketsFileContents = fs.readFileSync(rocketsFilePath);
    const rocketNamesResult = getRocketNames(rocketsFileContents);

    if (rocketNamesResult.result === 'success') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ rockets.json
      const rocketsJsonPath = path.join(__dirname, 'rockets.json');
      fs.writeFileSync(rocketsJsonPath, JSON.stringify({ rocketNames: rocketNamesResult.rocketNames }));

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –º–∏—Ä–∞ –≤ –ø–∞–ø–∫—É /exchanges/world
      const newWorldFilePath = path.join(worldExchangesFolderPath, fileName);
      fs.renameSync(filePath, newWorldFilePath);

      ctx.reply('–ò–º–µ–Ω–∞ —Ä–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ rockets.json. –§–∞–π–ª –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω.');
    } else if (rocketNamesResult.result === 'repeat') {
      ctx.reply(`–û—à–∏–±–∫–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Ä–∞–∫–µ—Ç: ${rocketNamesResult.duplicates.join(', ')}`);
    } else {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ Rockets.txt. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑.');
  } finally {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    setUserStatusById(userId, null);
    const directoryPath = checkWorldFolderPath;
    clearDirectory(directoryPath);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
function clearDirectory(directoryPath) {
  const files = fs.readdirSync(directoryPath);

  for (const file of files) {
    const filePath = path.join(directoryPath, file);

    if (fs.statSync(filePath).isDirectory()) {
      // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤—ã–∑—ã–≤–∞–µ–º clearDirectory —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
      clearDirectory(filePath);
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      fs.rmdirSync(filePath);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      fs.unlinkSync(filePath);
    }
  }
}

bot.command('checkfile', (ctx) => {
  const solarSystemPath = path.join(__dirname, exchangesFolder, solarSystemFolder, 'solar_system.zip');
  const worldPath = path.join(__dirname, exchangesFolder, worldFolder, 'world.zip');

  const solarSystemStatus = fs.existsSync(solarSystemPath) ? '‚úÖ' : '‚ùå';
  const worldStatus = fs.existsSync(worldPath) ? '‚úÖ' : '‚ùå';

  const message = `
–í–æ—Ç –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã:
${solarSystemStatus} –§–∞–π–ª —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
${worldStatus} –§–∞–π–ª –º–∏—Ä–∞
`;

  

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫
  if (solarSystemStatus === '‚úÖ' && worldStatus === '‚úÖ') {
    ctx.reply(message);
    ctx.reply('–Ø –≥–æ—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—Ç—É –∏–≥—Ä—ã! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /begin –∫–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.');
  }
  else{
    ctx.reply(message);
  }
});


bot.command('begin', async (ctx) => {
  const userId = ctx.from.id;

  if (userId !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  });

bot.command('ban', (ctx) => {
  if (ctx.from.id !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞
  const match = ctx.message.text.match(/(\d{9,})\s+(.*)/);

  if (!match) {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID) –∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞.');
    return;
  }

  const userIdToBan = match[1];
  const banReason = match[2];

  getUserNameById(userIdToBan, (err, username) => {
    const usernameToBan = username;
    const bannedUsersList = loadBannedUsers();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isUserBanned = bannedUsersList.some((user) => user.id === userIdToBan);

    if (isUserBanned) {
      ctx.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.');
      return;
    }

    bannedUsersList.push({
      id: userIdToBan,
      username: usernameToBan,
      reason: banReason, // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
    saveBannedUsers(bannedUsersList);

    ctx.telegram.sendMessage(
      userIdToBan,`
–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã! 
–ü—Ä–∏—á–∏–Ω–∞: <b>${banReason}</b>

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å –±–∞–Ω, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É:

@Morty_Flame - Rocket Space`,
      { parse_mode: 'HTML' }
    );

    ctx.telegram.sendMessage(
      ownerId,`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameToBan} (ID: ${userIdToBan}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!
–ü—Ä–∏—á–∏–Ω–∞: <b>${banReason}</b>`,
      { parse_mode: 'HTML' }
    );
  });
});


function loadBannedUsers() {
  try {
    const data = fs.readFileSync(bannedUsersFile, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    return [];
  }
}

function saveBannedUsers(bannedUsersList) {
  const data = JSON.stringify(bannedUsersList, null, 2);
  fs.writeFileSync(bannedUsersFile, data);
}

function loadBannedUsers() {
  try {
    const data = fs.readFileSync(bannedUsersFile, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    return [];
  }
}

function saveBannedUsers(bannedUsersList) {
  const data = JSON.stringify(bannedUsersList, null, 2);
  fs.writeFileSync(bannedUsersFile, data);
}

bot.command('unban', (ctx) => {

  if (ctx.from.id !== ownerId) {
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      return;
  }

  // Check if the user provided the user ID
  const userIdToUnban = ctx.message.text.match(/(\d+)/)?.[1];

  if (!userIdToUnban) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID) –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.');
      return;
  }
  getUserNameById(userIdToUnban, (err, username) => {
    const bannedUsersList = loadBannedUsers();

    const indexOfBannedUser = bannedUsersList.findIndex(user => user.id === userIdToUnban);

    if (indexOfBannedUser === -1) {
        ctx.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.');
        return;
    }

    // Remove the user from the banned list
    bannedUsersList.splice(indexOfBannedUser, 1);

    // Save the updated list of banned users to the file
    saveBannedUsers(bannedUsersList);

    ctx.telegram.sendMessage(userIdToUnban, '–° –≤–∞—Å –±—ã–ª —Å–Ω—è—Ç –±–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.');

    ctx.telegram.sendMessage(ownerId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${userIdToUnban}) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.`);
    });

});

bot.command('banlist', (ctx) => {
  const userheg = ctx.from.username;
  const userId = ctx.from.id;

  if (userId !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  const bannedUsersList = loadBannedUsers();

  if (bannedUsersList.length === 0) {
    ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç.');
    return;
  }

  let listText = '–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n';

  bannedUsersList.forEach((bannedUser, index) => {
    const username = bannedUser.username;
    const userId = bannedUser.id;
    const banReason = bannedUser.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'; // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏—á–∏–Ω—ã –±–∞–Ω–∞

    listText += `${index + 1}. @${username}, ID: ${userId}, –ü—Ä–∏—á–∏–Ω–∞: :"<b>${banReason}</b>"\n`;
  });

  ctx.replyWithHTML(listText);
});


bot.command('plist', (ctx) => {
  const userheg = ctx.from.username;
  if (ctx.from.id !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!');
    return;
  }

  const participants = loadParticipants();

  if (participants.length === 0) {
    ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.');
    return;
  }

  let listText = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n';

  participants.forEach((participant, index) => {
    const username = participant.username;
    const userId = participant.id;
    listText += `${index + 1}. @${username}, ID: ${userId}\n`;
  });

  ctx.replyWithHTML(listText);
});

bot.hears('‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è', (ctx) => {

  ctx.reply(`
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä.
  
–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤ SpaceFlight Simulator –£—Å—Ç—Ä–æ–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
–í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ –æ—á–µ—Ä–µ–¥—å –∏ –∫–æ–≥–¥–∞ –æ–Ω–∞ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –≤–∞—Å, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –º–∏—Ä, –≤–∞–º –¥–∞—ë—Ç—Å—è 12 —á–∞—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω–æ–º –º–∏—Ä–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∏—Ä –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ë–æ—Ç –±—É–¥–µ—Ç –æ–± —ç—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.
–ü–æ—Å–ª–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–º—É —á–µ–ª–æ–≤–µ–∫—É –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ë–æ—Ç —Ç–∞–∫ –∂–µ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å.
–ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –±—Ä–∞—Ç—å –º–∏—Ä, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å. –ò –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ. –ë–æ—Ç –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å –º–∏—Ä —Å–Ω–æ–≤–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –∫–∞–∂–¥–æ–º —Å–µ–∑–æ–Ω–µ —Ç–æ–ª—å–∫–æ ${maxUsers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ, –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é
    
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º:
    
@akmdnepr - –ö–æ–¥–µ—Ä –ê—Ä—Ç–µ–º
@ArKa2561 - –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–ª—É—á—à–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞)
@Morty_Flame - Rocket Space`);
});


bot.hears('ü§ñ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ü§ñ', (ctx) => {
  ctx.reply(`
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  
/an - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
/rules - –ø—Ä–∞–≤–∏–ª–∞ 
  `);
});


bot.hears('üìî –ü—Ä–∞–≤–∏–ª–∞ üìî', (ctx) => {

  ctx.reply(`
–ü—Ä–∞–≤–∏–ª–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:

1. –£ –≤–∞—Å –µ—Å—Ç—å 12 —á–∞—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏—Ä–µ –∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏.
2. –ù–µ–ª—å–∑—è –ª–æ–º–∞—Ç—å, —É–¥–∞–ª—è—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ –∫–∞–∫-–ª–∏–±–æ –ø–æ—Ä—Ç–∏—Ç—å —á—É–∂–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –ú–æ–∂–Ω–æ –∏—Ö –¥–æ–ø–æ–ª–Ω—è—Ç—å.
3. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–∫.
    
–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∏–∑ –ø—Ä–∞–≤–∏–ª —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Å–º–æ–∂–µ—Ç —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –Ω–∏–∫–æ–≥–¥–∞.
  `);
});

bot.command('open', (ctx) => {
  
  if (ctx.from.id !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  isRegistrationOpen = true;
  ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞. –ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.');
});

bot.command('close', (ctx) => {

  if (ctx.from.id !== ownerId) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  isRegistrationOpen = false;
  ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.');
});

function isUserInList(userId) {
  const participants = loadParticipants();
  return participants.some((participant) => participant.id === userId) && !bannedUsers[userId];
}

bot.hears('üöÄ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üöÄ', (ctx) => {
  const userheg = ctx.from.username;
  const userId = ctx.from.id;

  if (hasExceededTries(userId)) {
    ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∫–µ—Ç—É! –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç');
    return;
  }

  if (isUserInList(userId)) {
    ctx.reply('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }

  if (approvedUsersCount >= maxUsers) {
    ctx.reply('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.');
    isRegistrationOpen = false; 
    return;
  }


  if (!isRegistrationOpen) {
    ctx.reply(`
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –í—Å—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏—â–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ: 

https://t.me/rocketSpaceee`);
    return;
  }


  ctx.reply(`
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–ª–µ–¥—É—è –ø—Ä–∏–º–µ—Ä—É.

–í–ù–ò–ú–ê–ù–ò–ï!!! –£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ–≥–æ 1 –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–µ—Ç—ã! –û—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Å–µ—Ä—å–µ–∑–Ω–æ!

–ò–º—è: –î–æ–º–∏–Ω–∏–∫
–ù–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: 5 –º–µ—Å—è—Ü–µ–≤
–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é –≤ –º–∏—Ä–µ: –ú–µ–≥–∞—Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –æ—Ä–±–∏—Ç–µ –Æ–ø–∏—Ç–µ—Ä–∞
–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –º–æ–≥—É –∏–≥—Ä–∞—Ç—å: 4
–ö–∞–∫ —è –æ—Ü–µ–Ω–∏–≤–∞—é —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏: 7 (–∏–∑ 10)
  `);

  setTimeout(() => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'), 2000);
  waitingForApproval[userId] = { step: 1, data: {} };
});

bot.on('text', (ctx) => {
  const userheg = ctx.from.username;
  const userId = ctx.from.id;

  if (waitingForApproval[userId]) {
    const { step, data } = waitingForApproval[userId];

    if (step === 1) {
      data.name = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:');
      waitingForApproval[userId] = { step: 2, data };
    } else if (step === 2) {
      data.playedTime = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤ –º–∏—Ä–µ:');
      waitingForApproval[userId] = { step: 3, data };
    } else if (step === 3) {
      data.plan = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å:');
      waitingForApproval[userId] = { step: 4, data };
    } else if (step === 4) {
      data.hoursPerDay = ctx.message.text;
      ctx.reply('–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ (–æ—Ç 1 –¥–æ 10). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:');
      waitingForApproval[userId] = { step: 5, data };
    } else if (step === 5) {
      if (!isNaN(ctx.message.text)) {
        const skillLevel = parseInt(ctx.message.text);

        if (skillLevel >= 1 && skillLevel <= 10) {
          data.skills = skillLevel.toString();

          if (validateAnketa(data)) {
            ctx.reply('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∫–µ—Ç—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç.');

            userTries[userId]++;

            ctx.telegram.sendMessage(ownerId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userheg} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–Ω–∫–µ—Ç—É. –ï–≥–æ ID: ${userId}\n\n–ò–º—è: ${data.name}\n–ù–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${data.playedTime}\n–ü–ª–∞–Ω –≤ –º–∏—Ä–µ: ${data.plan}\n–ß–∞—Å–æ–≤ –∏–≥—Ä—ã –≤ –¥–µ–Ω—å: ${data.hoursPerDay}\n–û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: ${data.skills}`, {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve:${userId}` },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject:${userId}` },
                    { text: '–ó–∞–±–∞–Ω–∏—Ç—å', callback_data: `ban:${userId}`}
                  ]
                ]
              }
            });
          } else {
            ctx.reply(`
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –∏ –±–æ—Ç –Ω–µ —É–∫–∞–∂–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∏—á–∏–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è -  –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É:

@akmdnepr - –ö–æ–¥–µ—Ä –ê—Ä—Ç–µ–º
@ArKa2561 - –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–ª—É—á—à–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞)
@Morty_Flame - Rocket Space
          `);
          }

          delete waitingForApproval[userId];
        } else {
          ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞–≤—ã–∫–æ–≤ –æ—Ç 1 –¥–æ 10.');
        }
      } else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞–≤—ã–∫–æ–≤.');
      }
    }
  }
});

bot.action(/ban:(\d+)/, async (ctx) =>{
  const userId = ctx.match[1];
  const autoReplyText = `/ban ${userId} –¥–æ–ª–±–æ–µ–±`;
  ctx.replyWithHTML(`–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞: <code>${autoReplyText}</code>`);
})

bot.action(/approve:(\d+)/, async (ctx) => {
  const userId = ctx.match[1];
  const userAnketa = waitingForApproval[userId];

  // –ü–æ–ª—å–∑—É–µ–º—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π getUserNameById –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username –ø–æ userId
  getUserNameById(userId, (err, username) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username:', err);
    } else {
      if (username) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} (ID: ${userId})!`);
        delete waitingForApproval[userId];

        if (!isUserInList(userId)) {
          addApprovedUserToParticipants(userId, username);
          approvedUsersCount++;
          ctx.telegram.sendMessage(userId, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!');
        } else {
          ctx.telegram.sendMessage(ownerId, `–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} (ID: ${userId}). –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.`);
        }
      } else {
        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
      }
    }
  });
});

bot.action(/reject:(\d+)/, async (ctx) => {
  const userId = ctx.match[1];
  ctx.reply('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
  ctx.telegram.sendMessage(userId, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');

  delete waitingForApproval[userId];

});

function validateAnketa(userId) {

  if (hasExceededTries(userId)) {
    return;
  }

  if (isUserInList(userId)) {
    return;
  }

  if (approvedUsersCount >= maxUsers) {
    isRegistrationOpen = false; 
    return;
  }


  if (!isRegistrationOpen) {
    return;
  }

  return true; 
}

function addApprovedUserToParticipants(userId, username, played = false) {
  const participants = loadParticipants();

  if (participants.length < maxUsers) {
    const numericUserId = parseInt(userId);
    const newUser = {
      id: numericUserId,
      queueNumber: participants.length + 1,
      username: username,
      played: false
    };
    participants.push(newUser);
    saveParticipants(participants);
  }
  else{
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –±—ã–ª–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!')
  }
}



function loadParticipants() {
  try {
    const data = fs.readFileSync(participantsFile, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    return [];
  }
}

function saveParticipants(participants) {
  const data = JSON.stringify(participants, null, 2);
  fs.writeFileSync(participantsFile, data);
}

function isQueueFull() {
  const participants = loadParticipants();
  return participants.length >= maxUsers;
}

const userTries = {};


function hasExceededTries(userId) {
  if (!userTries[userId]) {
    userTries[userId] = 1;
  }
  const exceeded = userTries[userId] > 1;


  return exceeded;
}


bot.launch();